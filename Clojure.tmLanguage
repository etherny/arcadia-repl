<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>xyz</string>
		<string>cljs</string>
		<string>clj</string>
		<string>cljc</string>
	</array>
	<key>name</key>
	<string>Clojure</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#all</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expr</string>
				</dict>
			</array>
		</dict>
		<key>anything</key>
		<dict>
			<key>name</key>
			<string>anything</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([^\(\)\[\]]*)</string>
					<key>name</key>
					<string>nonbracket</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_vector</string>
				</dict>
			</array>
		</dict>
		<key>argument_literal</key>
		<dict>
			<key>match</key>
			<string>(%(&amp;|([1-9][0-9]*)))</string>
			<key>name</key>
			<string>meta.lambda.argument</string>
		</dict>
		<key>comment</key>
		<dict>
			<key>name</key>
			<string>comment.line.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;.*$\n?</string>
					<key>name</key>
					<string>comment.line.clojure</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(comment</string>
					<key>contentName</key>
					<string>comment.form.clojure</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.macro.clojure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#anything</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comment_list</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>comment_list</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#anything</string>
				</dict>
			</array>
		</dict>
		<key>comment_vector</key>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>end</key>
			<string>(\])</string>
			<key>name</key>
			<string>comment_vector</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#anything</string>
				</dict>
			</array>
		</dict>
		<key>deref</key>
		<dict>
			<key>match</key>
			<string>([\@])</string>
			<key>name</key>
			<string>meta.deref.clojure</string>
		</dict>
		<key>expr</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#repl_prompt</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sexpr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special_form</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#argument_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qualified_symbol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#symbol</string>
				</dict>
			</array>
		</dict>
		<key>float</key>
		<dict>
			<key>match</key>
			<string>(\-?[0-9]+\.[0-9]+)</string>
			<key>name</key>
			<string>float</string>
		</dict>
		<key>integer</key>
		<dict>
			<key>match</key>
			<string>(0|\-?[1-9][0-9]*)</string>
			<key>name</key>
			<string>integer</string>
		</dict>
		<key>keyword</key>
		<dict>
			<key>name</key>
			<string>meta.keyword.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qualified_keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unqualified_keyword</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>begin</key>
			<string>(\()(?!\))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.sequence.start</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!\()(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.sequence.end</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.sexpr.list.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#all</string>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ratio</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
			</array>
		</dict>
		<key>qualified_keyword</key>
		<dict>
			<key>begin</key>
			<string>(::)</string>
			<key>end</key>
			<string>(?=\W)</string>
			<key>name</key>
			<string>meta.keyword.qualified.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#symbol</string>
				</dict>
			</array>
		</dict>
		<key>qualified_symbol</key>
		<dict>
			<key>match</key>
			<string>(?&lt;c&gt;[^\(\)\[\]{};#%\^~`'":@\s\/\\])(?&lt;sym&gt;\g&lt;c&gt;|[0-9#%'\.])*\/\g&lt;sym&gt;+</string>
			<key>name</key>
			<string>symbol.qualified</string>
		</dict>
		<key>ratio</key>
		<dict>
			<key>match</key>
			<string>(0|\-?[1-9][0-9]*)\/(0|\-?[1-9][0-9]*)</string>
			<key>name</key>
			<string>ratio</string>
		</dict>
		<key>regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>#"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.regex.clojure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>repl_prompt</key>
		<dict>
			<key>match</key>
			<string>([\n]|^)((?&lt;c&gt;[^\(\)\[\]{};#%\^~`'":@\s\/\\])+â–º)</string>
			<key>name</key>
			<string>meta.symbol.repl_prompt</string>
		</dict>
		<key>sexpr</key>
		<dict>
			<key>name</key>
			<string>meta.sexpr.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#vec</string>
				</dict>
			</array>
		</dict>
		<key>special</key>
		<dict>
			<key>match</key>
			<string>([\`\~\'\@])</string>
			<key>name</key>
			<string>meta.special.clojure</string>
		</dict>
		<key>special_form</key>
		<dict>
			<key>name</key>
			<string>meta.special_form.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([`~'@](?&lt;c&gt;[^\(\)\[\]{};#%\^~`'":@\s\/\\])(\g&lt;c&gt;|[0-9#%'])*)</string>
					<key>name</key>
					<string>meta.specialized.clojure</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>end</key>
					<string>(\))</string>
					<key>name</key>
					<string>meta.specialized.clojure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.clojure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escape</key>
		<dict>
			<key>match</key>
			<string>\\(.)</string>
			<key>name</key>
			<string>constant.character.escape.clojure</string>
		</dict>
		<key>symbol</key>
		<dict>
			<key>match</key>
			<string>(?&lt;c&gt;[^\(\)\[\]{};#%\^~`'":@\s\/\\])(\g&lt;c&gt;|[0-9#%'])*</string>
			<key>name</key>
			<string>symbol</string>
		</dict>
		<key>unqualified_keyword</key>
		<dict>
			<key>begin</key>
			<string>(:[^:])</string>
			<key>end</key>
			<string>()\b</string>
			<key>name</key>
			<string>meta.keyword.unqualified.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qualified_symbol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#symbol</string>
				</dict>
			</array>
		</dict>
		<key>vec</key>
		<dict>
			<key>begin</key>
			<string>(\[)(?!\])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.sequence.start</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!\[)(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.sequence.end</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.vec.clojure</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#all</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.clojure</string>
	<key>uuid</key>
	<string>-5584466320959560-558446636-69771</string>
</dict>
</plist>
